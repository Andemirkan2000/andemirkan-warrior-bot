import logging
import openai
import telegram
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext
from telegram import Update
from datetime import datetime
from apscheduler.schedulers.background import BackgroundScheduler
from pytz import timezone
import random
import os
import json

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
TELEGRAM_TOKEN = os.environ.get("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.environ.get("OPENAI_API_KEY")
openai.api_key = OPENAI_API_KEY

# === –õ–û–ì–ò ===
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# === –•–†–ê–ù–ò–õ–ò–©–ï ===
user_data = {}
daily_habits = {}
daily_journal = {}
user_goals = {}
user_ids = set()

# === –ö–û–î–ï–ö–° –í–û–ò–ù–ê ===
WARRIOR_CODE = (
    "1. –Ø –∏–¥—É –≤–ø–µ—Ä—ë–¥, –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ —Å—Ç—Ä–∞—Ö.\n"
    "2. –Ø —á–µ—Å—Ç–µ–Ω —Å —Å–æ–±–æ–π –∏ –¥—Ä—É–≥–∏–º–∏.\n"
    "3. –Ø —É–∫—Ä–µ–ø–ª—è—é —Ç–µ–ª–æ, –¥—É—Ö –∏ —É–º.\n"
    "4. –Ø –¥–µ–π—Å—Ç–≤—É—é, –¥–∞–∂–µ –∫–æ–≥–¥–∞ –Ω–µ —Ö–æ—á–µ—Ç—Å—è.\n"
    "5. –Ø –≤—ã–±–∏—Ä–∞—é –ø—É—Ç—å, –∞ –Ω–µ –∫–æ–º—Ñ–æ—Ä—Ç."
)

HELP_TEXT = (
    "üìñ *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
    "/start ‚Äî –Ω–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º\n"
    "/–¥–Ω–µ–≤–Ω–∏–∫ [—Ç–µ–∫—Å—Ç] ‚Äî –∑–∞–ø–∏—Å–∞—Ç—å –º—ã—Å–ª—å –∏–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –¥–Ω–µ–≤–Ω–∏–∫\n"
    "/–ø—Ä–∏–≤—ã—á–∫–∞ [–Ω–∞–∑–≤–∞–Ω–∏–µ] ‚Äî –æ—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é –ø—Ä–∏–≤—ã—á–∫—É\n"
    "/—Ü–µ–ª—å [–æ–ø–∏—Å–∞–Ω–∏–µ] ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —Ü–µ–ª—å\n"
    "/—Ü–µ–ª–∏ ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ü–µ–ª–µ–π –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å\n"
    "/—à–∞–≥ ‚Äî –æ—Ç–º–µ—Ç–∏—Ç—å —à–∞–≥ –ø–æ –ø–µ—Ä–≤–æ–π —Ü–µ–ª–∏\n"
    "/–æ—Ç—á—ë—Ç ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞ —Å–µ–≥–æ–¥–Ω—è\n"
    "/–ø—É—Ç—å ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –ö–æ–¥–µ–∫—Å –í–æ–∏–Ω–∞\n"
    "/–ø–æ–º–æ—â—å ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
)

# === GPT-–§–£–ù–ö–¶–ò–Ø ===
def generate_response(user_id: int, user_message: str) -> str:
    messages = user_data.get(user_id, [{
        "role": "system",
        "content": "–¢—ã ‚Äî –ª–∏—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ê–Ω–¥–µ–º–∏—Ä–∫–∞–Ω–∞. –¢—ã –ø–æ–º–æ–≥–∞–µ—à—å –µ–º—É –∏–¥—Ç–∏ –ø–æ —Ñ–∏–ª–æ—Å–æ—Ñ–∏–∏ '–ü—É—Ç—å –í–æ–∏–Ω–∞', –Ω–∞–ø–æ–º–∏–Ω–∞–µ—à—å –æ –µ–≥–æ –∫–æ–¥–µ–∫—Å–µ, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—à—å –µ–≥–æ –º–æ—Ä–∞–ª—å–Ω–æ, –ø–æ–º–æ–≥–∞–µ—à—å –≤–µ—Å—Ç–∏ –¥–Ω–µ–≤–Ω–∏–∫, –ø—Ä–∏–≤—ã—á–∫–∏ –∏ —Ü–µ–ª–∏."
    }])
    messages.append({"role": "user", "content": user_message})

    response = openai.ChatCompletion.create(
        model="gpt-3.5-turbo",
        messages=messages,
        max_tokens=500,
        temperature=0.7
    )
    reply = response["choices"][0]["message"]["content"]
    messages.append({"role": "assistant", "content": reply})
    user_data[user_id] = messages[-10:]
    return reply

# === –°–û–•–†–ê–ù–ï–ù–ò–ï –í –§–ê–ô–õ ===
def save_to_file():
    with open("habits.json", "w", encoding="utf-8") as f:
        json.dump(daily_habits, f, ensure_ascii=False, indent=2)
    with open("journal.json", "w", encoding="utf-8") as f:
        json.dump(daily_journal, f, ensure_ascii=False, indent=2)
    with open("goals.json", "w", encoding="utf-8") as f:
        json.dump(user_goals, f, ensure_ascii=False, indent=2)

def load_from_file():
    global daily_habits, daily_journal, user_goals
    if os.path.exists("habits.json"):
        with open("habits.json", "r", encoding="utf-8") as f:
            daily_habits = json.load(f)
    if os.path.exists("journal.json"):
        with open("journal.json", "r", encoding="utf-8") as f:
            daily_journal = json.load(f)
    if os.path.exists("goals.json"):
        with open("goals.json", "r", encoding="utf-8") as f:
            user_goals = json.load(f)

# === –ö–û–ú–ê–ù–î–´ ===
def start(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    user_ids.add(user_id)
    update.message.reply_text("–ü—Ä–∏–≤–µ—Ç, –ê–Ω–¥–µ–º–∏—Ä–∫–∞–Ω. –Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ç–≤–æ–π –ü—É—Ç—å –í–æ–∏–Ω–∞. –ì–æ—Ç–æ–≤ –∏–¥—Ç–∏ –≤–º–µ—Å—Ç–µ.")

def handle_message(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    user_ids.add(user_id)
    user_message = update.message.text

    if user_message.startswith("/–¥–Ω–µ–≤–Ω–∏–∫"):
        text = user_message.replace("/–¥–Ω–µ–≤–Ω–∏–∫", "").strip()
        if text:
            today = datetime.now().strftime("%Y-%m-%d")
            daily_journal.setdefault(str(user_id), {}).setdefault(today, []).append(text)
            update.message.reply_text("–ó–∞–ø–∏—Å–∞–ª –≤ –¥–Ω–µ–≤–Ω–∏–∫. –ü—Ä–æ–¥–æ–ª–∂–∞–π –∏–¥—Ç–∏.")
            save_to_file()
        else:
            update.message.reply_text("–ù–∞–ø–∏—à–∏ —á—Ç–æ-—Ç–æ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /–¥–Ω–µ–≤–Ω–∏–∫.")
    elif user_message.startswith("/–ø—Ä–∏–≤—ã—á–∫–∞"):
        text = user_message.replace("/–ø—Ä–∏–≤—ã—á–∫–∞", "").strip()
        if text:
            today = datetime.now().strftime("%Y-%m-%d")
            daily_habits.setdefault(str(user_id), {}).setdefault(today, []).append(text)
            update.message.reply_text(f"–û—Ç–º–µ—á–µ–Ω–æ: {text}. –¢—ã –¥–µ—Ä–∂–∏—à—å —Ä–∏—Ç–º.")
            save_to_file()
        else:
            update.message.reply_text("–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏ –ø–æ—Å–ª–µ /–ø—Ä–∏–≤—ã—á–∫–∞.")
    elif user_message.startswith("/—Ü–µ–ª—å"):
        text = user_message.replace("/—Ü–µ–ª—å", "").strip()
        if text:
            user_goals.setdefault(str(user_id), []).append({"goal": text, "progress": 0})
            update.message.reply_text("–¶–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω–∞. –ù–∞—á–Ω–∏ –¥–≤–∏–∂–µ–Ω–∏–µ –∫ –Ω–µ–π.")
            save_to_file()
        else:
            update.message.reply_text("–ù–∞–ø–∏—à–∏ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫—É —Ü–µ–ª–∏ –ø–æ—Å–ª–µ /—Ü–µ–ª—å.")
    elif user_message.startswith("/—à–∞–≥"):
        uid = str(user_id)
        if uid in user_goals and user_goals[uid]:
            user_goals[uid][0]["progress"] += 1
            update.message.reply_text(f"–û—Ç–º–µ—á–µ–Ω —à–∞–≥ –∫ —Ü–µ–ª–∏: {user_goals[uid][0]['goal']}")
            save_to_file()
        else:
            update.message.reply_text("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç —Ü–µ–ª–∏. –î–æ–±–∞–≤—å —Å –ø–æ–º–æ—â—å—é /—Ü–µ–ª—å")
    elif user_message.startswith("/—Ü–µ–ª–∏"):
        uid = str(user_id)
        if uid in user_goals and user_goals[uid]:
            text = "\n".join([f"{g['goal']} ‚Äî —à–∞–≥–æ–≤: {g['progress']}" for g in user_goals[uid]])
            update.message.reply_text(f"üéØ –¢–≤–æ–∏ —Ü–µ–ª–∏:\n{text}")
        else:
            update.message.reply_text("–¶–µ–ª–µ–π –ø–æ–∫–∞ –Ω–µ—Ç. –î–æ–±–∞–≤—å —Å –ø–æ–º–æ—â—å—é /—Ü–µ–ª—å")
    elif user_message.startswith("/–æ—Ç—á—ë—Ç"):
        today = datetime.now().strftime("%Y-%m-%d")
        journal_entries = daily_journal.get(str(user_id), {}).get(today, [])
        habits_done = daily_habits.get(str(user_id), {}).get(today, [])

        report = f"\nüìò *–î–ù–ï–í–ù–ò–ö*: {'\n'.join(journal_entries) if journal_entries else '–ø—É—Å—Ç–æ'}"
        report += f"\n\n‚úÖ *–ü–†–ò–í–´–ß–ö–ò*: {'\n'.join(habits_done) if habits_done else '–Ω–µ –æ—Ç–º–µ—á–µ–Ω—ã'}"
        update.message.reply_text(report, parse_mode=telegram.ParseMode.MARKDOWN)
    elif user_message.startswith("/–ø—É—Ç—å"):
        update.message.reply_text(f"üõ° *–¢–≤–æ–π –ö–æ–¥–µ–∫—Å –í–æ–∏–Ω–∞:*\n\n{WARRIOR_CODE}", parse_mode=telegram.ParseMode.MARKDOWN)
    elif user_message.startswith("/–ø–æ–º–æ—â—å"):
        update.message.reply_text(HELP_TEXT, parse_mode=telegram.ParseMode.MARKDOWN)
    else:
        reply = generate_response(user_id, user_message)
        update.message.reply_text(reply)

# === –ü–õ–ê–ù–ò–†–û–í–©–ò–ö ===
def send_reminders(context: CallbackContext):
    for user_id in user_ids:
        context.bot.send_message(chat_id=user_id, text="–•–æ—á–µ—à—å –∑–∞–ø–∏—Å–∞—Ç—å –º—ã—Å–ª–∏ –≤ –¥–Ω–µ–≤–Ω–∏–∫, –æ—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É –∏–ª–∏ —Å–¥–µ–ª–∞—Ç—å —à–∞–≥ –∫ —Ü–µ–ª–∏?")

# === –ü–†–û–ì–†–ï–°–° ===
def send_progress_report(context: CallbackContext):
    for user_id in user_ids:
        uid = str(user_id)
        journal_count = sum(len(entries) for entries in daily_journal.get(uid, {}).values())
        habit_days = len(daily_habits.get(uid, {}))
        goals = user_goals.get(uid, [])
        goal_text = "\n".join([f"{g['goal']} ‚Äî —à–∞–≥–æ–≤: {g['progress']}" for g in goals]) if goals else "–Ω–µ—Ç"

        messages = [
            "–¢—ã –∏–¥—ë—à—å. –ù–µ –±—ã—Å—Ç—Ä–æ, –Ω–æ —Ç–≤—ë—Ä–¥–æ. –ü—Ä–æ–¥–æ–ª–∂–∞–π.",
            "–í–∏–∂—É, —Ç—ã –Ω–µ —Å–¥–∞—ë—à—å—Å—è. –≠—Ç–æ –∏ –µ—Å—Ç—å –ø—É—Ç—å.",
            "–ü—É—Ç—å –í–æ–∏–Ω–∞ –Ω–µ –≤ —Ç–æ–º, —á—Ç–æ–±—ã –±—ã—Ç—å –∏–¥–µ–∞–ª—å–Ω—ã–º ‚Äî –∞ –≤ —Ç–æ–º, —á—Ç–æ–±—ã –≤—Å—Ç–∞–≤–∞—Ç—å."
        ]

        message = f"üìä *–¢–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å*:\n–ó–∞–ø–∏—Å–µ–π –≤ –¥–Ω–µ–≤–Ω–∏–∫–µ: {journal_count}\n–î–Ω–µ–π —Å –ø—Ä–∏–≤—ã—á–∫–∞–º–∏: {habit_days}\n–¶–µ–ª–∏:\n{goal_text}\n\n{random.choice(messages)}"
        context.bot.send_message(chat_id=user_id, text=message, parse_mode=telegram.ParseMode.MARKDOWN)

# === –ó–ê–ü–£–°–ö ===
def main():
    load_from_file()

    updater = Updater(TELEGRAM_TOKEN, use_context=True)
    dp = updater.dispatcher

    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_message))

    moscow_tz = timezone("Europe/Moscow")
    scheduler = BackgroundScheduler()
    scheduler.add_job(send_reminders, 'cron', hour=9, minute=0, args=[updater.bot], timezone=moscow_tz)
    scheduler.add_job(send_reminders, 'cron', hour=20, minute=0, args=[updater.bot], timezone=moscow_tz)
    scheduler.add_job(send_progress_report, 'cron', day='1,15', hour=12, minute=0, args=[updater.bot], timezone=moscow_tz)
    scheduler.start()

    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()
